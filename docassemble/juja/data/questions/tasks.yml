---
# Sets a variable in the interview. This is used in the context of a
# background_action_response.
event: set_variable
code: |
  for name, value in action_arguments().items():
    define(name, value)
  background_response()
---
code: |
  registration_data = {
    "Ensemble": ensemble.name,
    "Künstlerische Leitung": ensemble.leader,
    "E-Mail Künstlerische Leitung": ensemble.leader_mail,
    "Grösse": ensemble.size,
    "Homepage": ensemble.homepage,
    "Facebook": ensemble.facebook,
    "Twitter": ensemble.twitter,
    "Instagram": ensemble.instagram,
    "Sonstige Präsenzen": ensemble.presences,
    "Foto Copyright": ensemble.photo_copyright,
    "Orga Name": admin_contact.name.full(),
    "Orga Funktion": admin_contact.role,
    "Orga E-Mail": admin_contact.email,
    "Orga Telefon": admin_contact.phone_number,
    "Orga Adresse": adresse(admin_contact),
    "Newsletter": newsletter,
    "Rechnungsempfänger": billing_contact.name.full(),
    "Rechnung E-Mail": billing_contact.email,
    "Rechnung Telefon": billing_contact.phone_number,
    "Zeitraum Samstag": preferred_times.saturday,
    "Zeitraum Sonntag": preferred_times.sunday,
  
    "Rechnungsnummer": rechnungsnummer,
    "Anmeldedatum": current_datetime(timezone="Europe/Berlin").format_datetime('d.M.YYYY HH:mm'),
  }
---
# A task that adds a row to the Anmeldungen.
need: [rechnungsnummer, msgraph]
code: |
  if testmodus:
    save_data_task = None
  else:
    save_data_task = background_action(
      'append_to_table',
      'refresh',
    )
---
# This action saves registration_data to a table configured via global settings.
event: append_to_table
need: [rechnungsnummer, msgraph]
code: |
  background = interface() in {"worker", "cron"}
  result = msgraph.add_table_data(
    daten["Anmeldungen"]["Bibliothek"],
    daten["Anmeldungen"]["Dokument"],
    daten["Anmeldungen"]["Tabelle"],
    registration_data
  ).json()
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
sets: rechnung
need: [rechnungsnummer, rechnung_task]
code: Warten
---
code: rechnung_task = background_action('assemble_rechnung', 'refresh')
need: [rechnungsnummer, rechnungsdatum]
---
event: assemble_rechnung
need: [rechnungsnummer, rechnungsdatum]
code: |
  background_response_action(
    'set_variable',
    rechnung=rechnungsformular
  )
---

---
need: [rechnungsnummer, rechnung, msgraph]
code: |
  if testmodus:
    archive_task = None
  else:
    archive_task = background_action('archive', 'refresh')
---
event: archive
need: [rechnungsnummer, rechnung, msgraph]
code: |
  import io
  import pandas as pd
  
  background = interface() in {"worker", "cron"}
  drive = daten["Anmeldungen"]["Bibliothek"]
  folder = daten["Anmeldungen"]["Ordner"]
  lineup = songs.table.as_df()
  
  archive_folder = msgraph.post(
    f"drives/{drive}/items/{folder}/children",
    json={
      "name": ensemble.name,
      "folder": {},
      "@microsoft.graph.conflictBehavior": "rename"
    }
  ).json()["id"]
  
  with open(rechnung.pdf.path(), 'rb') as f:
    invoice_response = msgraph.upload_file(
      drive,
      archive_folder,
      rechnung.pdf.filename,
      f
    )
  photo = ensemble.photo[0]
  with open(photo.path(), 'rb') as f:
    photo_response = msgraph.upload_file(
      drive,
      archive_folder,
      "Foto." + photo.extension,
      f
    )
  with io.StringIO(ensemble.description) as f:
    desc_response = msgraph.upload_file(
      drive,
      archive_folder,
      "Beschreibung.txt",
      f
    )
  with io.BytesIO() as f:
    lineup.to_excel(f, sheet_name="Programm", index=False, freeze_panes=(1,0))
    f.seek(0)
    lineup_response = msgraph.upload_file(
      drive,
      archive_folder,
      "Programm.xlsx",
      f
    )
  
  assert invoice_response.status_code == 201
  assert photo_response.status_code == 201
  assert desc_response.status_code == 201
  assert lineup_response.status_code == 201
  
  del (
    drive,
    folder,
    photo,
    lineup,
    f,
    io,
    pd,
    invoice_response,
    photo_response,
    desc_response,
    lineup_response
  )
  if background:
      background_response_action(
        'set_variable',
        archive_folder=archive_folder
      )
  else:
    json_response({})
---

---
code: |
  import io
  import pandas as pd
  
  member_data = members.table.as_df()
  
  with io.BytesIO() as f:
    with pd.ExcelWriter(f, engine='xlsxwriter') as writer:
      member_data.to_excel(writer, sheet_name="Bandmitglieder", index=False, freeze_panes=(1,0))
      worksheet = writer.sheets["Bandmitglieder"]
      worksheet.write_string(len(member_data) + 2, 0, "Altersdurchschnitt")
      worksheet.write_dynamic_array_formula(len(member_data) + 2, 1, f'=AVERAGE(DATEDIF(B2:B{len(member_data)+1}, "2022-09-01", "y"))')
    f.seek(0)
    response = msgraph.upload_file(
      daten["Anmeldungen"]["Bibliothek"],
      archive_folder,
      "Mitglieder.xlsx",
      f
    )
  
  assert response.status_code == 201 
  del (
    member_data,
    f,
    writer,
    worksheet,
    response,
    io,
    pd
  )
  MitgliederUpdate = True
---

---
# Sends an email to the registered email address
need: [rechnungsnummer, rechnung, mailgun]
code: |
  if testmodus:
    member_email_task = None
  else:
    member_email_task = background_action('send_member_email', 'refresh')
---
# Sends an email to the registered email address.
event: send_member_email
need: [rechnungsnummer, rechnung, mailgun]
code: |
  background = interface() in {"worker", "cron"}
  recipients = [admin_contact]
  if billing_contact.email != admin_contact.email:
    recipients.append(billing_contact)
  result = mailgun.send_email(
    to=recipients,
    template=person_email,
    attachments=[rechnung.pdf]
  )
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# Sends an email to the notification addresses.
need: [mailgun]
code: |
  if testmodus:
    orga_email_task = None
  else:
    orga_email_task = background_action('send_orga_email', 'refresh')
---
# Sends an email to the notification addresses.
event: send_orga_email
need: [mailgun]
code: |
  background = interface() in {"worker", "cron"}
  recipients = daten["E-Mail Benachrichtigung"]
  if isinstance(recipients, str):
    recipients = [recipients]
  if not recipients:
    result = True
  else:
    to = [admin_contact] if testmodus else recipients
    result = mailgun.send_email(
      to=to,
      template=orga_email
    )
  if background:
    background_response(result)
  else:
    json_response(result)
---
